{"version":3,"sources":["components/cell.js","utilities.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","value","onClick","className","calculateWinner","cells","winningTables","i","length","a","b","c","cell","freeCells","reduce","newArray","idx","setValue","setCells","turn","setTurn","document","getElementsByClassName","style","fontSize","color","scores","minimax","board","depth","isMaximizing","result","bestScore","Infinity","keys","cell_idx","score","Math","max","min","App","useState","Array","fill","mode","setMode","line_pos","offset_top","offset_left","angle","winner","restart","display","classList","remove","style_reset","new_offset","cell_idx_1","cell_idx_2","line","cell_1","cell_2","atan2","offsetTop","offsetLeft","PI","offsetHeight","offsetWidth","calculateOffset","add","useEffect","setTimeout","free_cells","floor","random","move","bestMove","map","e","handleClick","top","transform","left","id","type","name","onChange","target","disabled","defaultChecked","htmlFor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.346e8225.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Cell({ value = '', onClick }) {\r\n    return (\r\n        <div className='cell' onClick={onClick}>\r\n            {value}\r\n        </div>\r\n    )\r\n}\r\n","/* export function calculateWinner(cells, line_pos) { */\r\nexport function calculateWinner(cells) {\r\n    const winningTables = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [6, 4, 2]\r\n    ];\r\n\r\n    for (let i = 0; i < winningTables.length; i++) {\r\n        const [a, b, c] = winningTables[i];\r\n        if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n            /* // Calculate line offset\r\n            const new_offset = calculateOffset(a, c);\r\n            line_pos.offset_top = new_offset.offset_top;\r\n            line_pos.offset_left = new_offset.offset_left;\r\n            line_pos.angle = new_offset.angle;\r\n            document.getElementsByClassName('line')[0].classList.add('stretch'); */\r\n            /* return cells[a]; */\r\n            return { cell: cells[a], a: a, c: c };\r\n        }\r\n    }\r\n    return (freeCells(cells).length > 0) ? null : { cell: 'tie', a: null, c: null }; // If board is full return 'tie'\r\n    /* return null; */\r\n}\r\n\r\n// Check if board is full\r\nexport function freeCells(cells) {\r\n    // Create a new array having the free cells indexes\r\n    const free_cells = cells.reduce((newArray, value, idx) => {\r\n        // Cell is free\r\n        if (value === '') {\r\n            return [...newArray, idx]; // Add cells index to new array\r\n        }\r\n        else return newArray;\r\n    }, []);\r\n    return free_cells\r\n}\r\n\r\n// Set cell's value to current player's sign and switch turns\r\nexport function setValue(cells, setCells, cell, turn, setTurn) {\r\n    setTurn((turn === 'x') ? 'o' : 'x');\r\n    var newArray = [...cells];\r\n    newArray[cell] = turn;\r\n    setCells(newArray);\r\n    document.getElementsByClassName('cell')[cell].style.fontSize = '4em';\r\n    if (turn === 'o') document.getElementsByClassName('cell')[cell].style.color = 'rgb(242, 235, 211)';\r\n}\r\n\r\n// Calculate line's top and left offsets + line's angle \r\nexport function calculateOffset(cell_idx_1, cell_idx_2) {\r\n    document.getElementsByClassName('line')[0].style.display = 'block';\r\n    const line = document.getElementsByClassName('line')[0];\r\n    const cell_1 = document.getElementsByClassName('cell')[cell_idx_1];\r\n    const cell_2 = document.getElementsByClassName('cell')[cell_idx_2];\r\n    const angle = Math.atan2(cell_2.offsetTop - cell_1.offsetTop, cell_2.offsetLeft - cell_1.offsetLeft) * 180 / Math.PI;\r\n    const offset_top = 0 - (line.offsetTop - cell_1.offsetTop - (angle !== 90 ? (cell_1.offsetHeight / 2) : 0));\r\n    const offset_left = angle !== 0 ? ((document.getElementsByClassName('cell')[0].offsetWidth / 2) + (angle === 90 ? cell_1.offsetWidth * (cell_idx_1 % 3) : 0)) : 0;\r\n    return { offset_top, offset_left, angle };\r\n}\r\n\r\nexport function style_reset() {\r\n    const cells = document.getElementsByClassName('cell');\r\n    for (let cell of cells) {\r\n        cell.style.color = 'rgb(84, 84, 84)';\r\n        cell.style.fontSize = '1em';\r\n    };\r\n}\r\n\r\nexport function bestMove(cells) {\r\n    let board = [...cells]; // Create a copy of the current board\r\n    let bestScore = -Infinity; // Reset best score\r\n    let move; // Best move\r\n\r\n    // Check all possible moves\r\n    for (let cell_idx of board.keys()) {\r\n        // Check if cell is free\r\n        if (board[cell_idx] === '') {\r\n            board[cell_idx] = 'o';\r\n            let score = minimax(board, 0, false); // Run minimax to get best score for this move\r\n            board[cell_idx] = ''; // Undo to check next move\r\n            // Update best score\r\n            if (score > bestScore) {\r\n                bestScore = score;\r\n                move = cell_idx;\r\n            }\r\n        }\r\n        /* console.log(board); */\r\n    }\r\n    return move;\r\n}\r\n\r\nlet scores = {\r\n    'x': -1,\r\n    'o': 1,\r\n    'tie': 0\r\n}\r\n\r\nfunction minimax(board, depth, isMaximizing) {\r\n    let result = calculateWinner(board);\r\n    if (result != null) {\r\n        /* console.log(scores[result.cell]); */\r\n        return scores[result.cell];\r\n    }\r\n\r\n    if (isMaximizing) {\r\n        let bestScore = -Infinity;\r\n        for (let cell_idx of board.keys()) {\r\n            // Check if cell is free\r\n            if (board[cell_idx] === '') {\r\n                board[cell_idx] = 'o';\r\n                let score = minimax(board, depth + 1, false); // Run minimax to get best score for this move\r\n                board[cell_idx] = ''; // Undo to check next move\r\n                // Update best score\r\n                bestScore = Math.max(score, bestScore);\r\n            }\r\n        }\r\n        return bestScore;\r\n    } else {\r\n        let bestScore = Infinity;\r\n        for (let cell_idx of board.keys()) {\r\n            // Check if cell is free\r\n            if (board[cell_idx] === '') {\r\n                board[cell_idx] = 'x';\r\n                let score = minimax(board, depth + 1, true); // Run minimax to get best score for this move\r\n                board[cell_idx] = ''; // Undo to check next move\r\n                // Update best score\r\n                bestScore = Math.min(score, bestScore);\r\n            }\r\n        }\r\n        return bestScore;\r\n    }\r\n}","import './App.css';\nimport Cell from './components/cell';\nimport React, { useState, useEffect } from 'react';\nimport { freeCells, calculateOffset, bestMove, calculateWinner, setValue, style_reset } from './utilities';\n\nfunction App() {\n  const [cells, setCells] = useState(Array(9).fill(''));\n  const [turn, setTurn] = useState('x');\n  const [mode, setMode] = useState('easy'); // AI mode\n  const line_pos = {\n    offset_top: 0,\n    offset_left: 0,\n    angle: 0\n  };\n  const winner = calculateWinner(cells);\n\n  // New game\n  const restart = () => {\n    setCells(['', '', '', '', '', '', '', '', '']);\n    setTurn('x');\n    document.getElementsByClassName('line')[0].style.display = 'none';\n    document.getElementsByClassName('line')[0].classList.remove('stretch');\n    style_reset();\n  }\n\n  if (winner) {\n    if (winner.cell !== 'tie') {\n      // Calculate line offset\n      const new_offset = calculateOffset(winner.a, winner.c);\n      line_pos.offset_top = new_offset.offset_top;\n      line_pos.offset_left = new_offset.offset_left;\n      line_pos.angle = new_offset.angle;\n      document.getElementsByClassName('line')[0].classList.add('stretch');\n    } else {\n      // tie\n      /* restart(); */\n    }\n  }\n\n\n  // User move\n  const handleClick = (e, i) => {\n    if (winner || cells[i] !== '') {\n      return;\n    };\n    setValue(cells, setCells, i, turn, setTurn);\n  }\n\n  // When a move is played\n  useEffect(() => {\n    // AI turn\n    const pcTurn = () => {\n      let free_cells = freeCells(cells);\n      if (mode === 'easy') { // Easy mode\n        setValue(cells, setCells, free_cells[Math.floor(Math.random() * freeCells.length)], turn, setTurn);\n      } else { // Hard mode\n        setValue(cells, setCells, bestMove(cells), turn, setTurn);\n      }\n    }\n\n    if (!winner && turn === 'o') {\n      setTimeout(pcTurn, 1000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cells])\n\n  return (\n    <div className=\"App\">\n      <div className='board'>\n        {cells.map((cell, i) => (\n          <Cell key={i} value={cell} onClick={(e) => turn === 'x' ? handleClick(e, i) : null}></Cell>\n        ))}\n      </div>\n      <div className='line' style={\n        {\n          top: line_pos.offset_top,\n          transform: `rotate(${line_pos.angle}deg)`,\n          left: line_pos.offset_left\n        }\n      } />\n      <h3> {winner ? `Winner: ${winner.cell}` : `Current Turn: ${turn}`}</h3>\n      <button className='restart' onClick={() => restart()}>Restart</button>\n      <div className='mode_selection'>\n        <span>\n          <input id='easy_mode' type='radio' name='game_mode' value='easy' onChange={(e) => setMode(e.target.value)} disabled={freeCells(cells).length < 9} defaultChecked />\n          <label htmlFor='easy_mode'>easy</label>\n        </span>\n        <span>\n          <input id='hard_mode' type='radio' name='game_mode' value='hard' onChange={(e) => setMode(e.target.value)} disabled={freeCells(cells).length < 9} />\n          <label htmlFor='hard_mode'>hard</label>\n        </span>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}